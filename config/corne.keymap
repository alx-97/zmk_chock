/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define LEFT_POSITIONS  0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38
#define RIGHT_POSITIONS 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41

/* Key Positions
╭────────────────────────╮ ╭────────────────────────╮
│  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
│ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
│ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
            ╰────────────╯ ╰────────────╯
*/
// Mouse Overrides

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2400
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 40

// Layers

#define DEFAULT   0
#define LOWER     1
#define UPPER     2
#define MACRO     3

/ {
    behaviors {
        hrml: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";

            //require-prior-idle-ms = <125>;

            hold-trigger-key-positions = < RIGHT_POSITIONS >;

            //hold-trigger-on-release; // delay positional check until key release

            bindings = <&kp>, <&kp>;
        };

        hrmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";

            //require-prior-idle-ms = <125>;

            hold-trigger-key-positions = < LEFT_POSITIONS >;

            //hold-trigger-on-release; // delay positional check until key release

            bindings = <&kp>, <&kp>;
        };

        lthp: layer_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;

            //require-prior-idle-ms = <125>;

            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };

        mthp: mod_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;

            //require-prior-idle-ms = <125>;

            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        mttp: mod_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;

            //require-prior-idle-ms = <125>;

            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESC &kp COLON &kp W &kp RETURN>;
        };

        vim_quit: vim_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESC &kp COLON &kp Q &kp RETURN>;
        };

        vim_up: vim_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LCTRL &kp U>;
        };

        vim_down: vim_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LCTRL &kp D>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "base";
            bindings = <
&kp Q           &kp Q  &kp W  &kp E         &kp R             &kp T        &kp Y          &kp U        &kp I            &kp O       &kp P          &kp MINUS
&kp LEFT_SHIFT  &kp A  &kp S  &kp D         &kp F             &kp G        &kp H          &kp J        &kp K            &kp L       &kp SEMICOLON  &kp SQT
&kp LCTRL       &kp Z  &kp X  &kp C         &kp V             &kp B        &kp N          &kp M        &kp COMMA        &kp PERIOD  &kp SLASH      &kp RIGHT_BRACKET
                              &kp LEFT_ALT  &kp LEFT_COMMAND  &kp ENTER    &kp BACKSPACE  &lt 1 SPACE  &lt 2 RIGHT_ALT
            >;
        };

        lower_layer {
            display-name = "low";
            bindings = <
&kp BSPC  &kp N1          &kp UP_ARROW    &kp N3           &kp N4  &kp N5    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6
&kp DEL   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp N9  &kp N0    &kp N7        &kp N8        &kp N9        &kp N0        &kp PLUS  &kp MINUS
&kp F1    &kp F2          &kp F3          &kp F4           &kp F5  &kp F6    &kp F7        &kp F8        &kp F9        &kp F10       &kp F11   &kp F12
                                          &trans           &trans  &trans    &trans        &trans        &trans
            >;
        };

        raise_layer {
            display-name = "up";
            bindings = <
&kp LG(N1)  &kp EXCL      &kp AT        &kp HASH         &kp DLLR      &kp PRCNT       &rgb_ug RGB_TOG  &rgb_ug RGB_OFF  &bl BL_INC  &bl BL_DEC  &bl BL_CYCLE  &bl BL_SET 70
&kp LG(N2)  &kp CARET     &kp AMPS      &kp KP_ASTERISK  &kp LPAR      &kp RPAR        &kp LBKT         &kp RBKT         &kp MINUS   &kp EQUAL   &kp BSLH      &kp RG(N3)
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4    &kp LBKT         &kp RBKT         &kp LT      &kp GT      &kp PIPE      &none
                                        &trans           &trans        &trans          &trans           &lt 3 Z          &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &bl BL_ON       &bl BL_OFF     &bl BL_TOG  &bl BL_INC  &bl BL_DEC  &bl BL_CYCLE
&trans  &trans  &trans  &trans  &trans  &trans    &bl BL_SET 100  &bl BL_SET 50  &trans      &trans      &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans         &trans      &trans      &trans      &trans
                        &trans  &trans  &trans    &trans          &trans         &trans
            >;
        };
    };
};
